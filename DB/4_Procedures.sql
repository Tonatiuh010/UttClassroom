/*##################### GET_STUDENTS #######################*/

DROP PROCEDURE IF EXISTS GET_STUDENTS;
DELIMITER //
CREATE PROCEDURE GET_STUDENTS(
	IN IN_STUDENT INT,
    OUT OUT_MSG VARCHAR(450)
) BEGIN 
	DECLARE EXIT HANDLER FOR SQLEXCEPTION 
    BEGIN
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = CONCAT( 'ERROR EXECUTING PROCESS [GET_STUDENTS] - (', @errno ,'): ', @errmsg);
	END;
    
    SET OUT_MSG = 'OK';
    
    SELECT 
		S.STUDENT_ID,
		S.NAME, 
		S.LAST_NAME,
		S.IMAGE,
		S.BIRTH,
		S.BIRTH_LOCATION,
        BIRTH_L.COUNTRY_ID,
		BIRTH_L.CITY_ID,
		BIRTH_L.CITY,
        C.CONTACT_ID,
        C.EMAIL1,
        C.EMAIL2,
        C.PHONE1,
        C.PHONE2,
		SA.ADDRESS_ID,
		SA.STREET,
		SA.NUMBER,
		SA.NEIGHBORHOOD,
		SA.LOCATION_ID ADDRESS_LOCATION,
        GENRE.ASSET_ID GENRE_ID,
		GENRE.ASSET_CODE GENRE_CODE, 
		GENRE.NAME GENRE, 
        MARITAL.ASSET_ID MARITAL_ID,
		MARITAL.ASSET_CODE MARITAL_CODE,
		MARITAL.NAME MARITAL,
		S.LABOR_ID,
		LS.DEPARTMENT,
		LS.BUSINESS,
		LS.ADDRESS_ID LABOR_ADDRESS,
		LS.CONTACT_ID LABOR_CONTACT,
		LS.IS_STUDY
	FROM 
		STUDENT S JOIN  ASSET GENRE ON GENRE.ASSET_ID = S.GENRE_ID
				  JOIN  ASSET MARITAL ON MARITAL.ASSET_ID = S.MARITAL_ID
                  LEFT JOIN CONTACT C ON C.CONTACT_ID = S.CONTACT_ID
				  LEFT JOIN LABOR_STUDENT LS ON LS.LABOR_ID = S.LABOR_ID
				  LEFT JOIN ADDRESS SA ON SA.ADDRESS_ID = S.ADDRESS_ID
				  LEFT JOIN LOCATION BIRTH_L ON BIRTH_L.LOCATION_ID = S.BIRTH_LOCATION
	WHERE
		S.STUDENT_ID = IFNULL(IN_STUDENT, S.STUDENT_ID);

END //
DELIMITER ;

SET @msg = null;
CALL GET_STUDENTS(1, @msg);
select @msg;

/*################ GET_ADDRESS ###################*/
DROP PROCEDURE IF EXISTS GET_ADDRESSES;
DELIMITER //
CREATE PROCEDURE GET_ADDRESSES(
	IN IN_ADDRESS INT,
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN 
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = CONCAT( 'ERROR EXECUTING PROCESS [GET_ADDRESSES] - (', @errno ,'): ', @errmsg);
    END;
    
    SET OUT_MSG = 'OK';
    
    SELECT 
		A.ADDRESS_ID,
		A.STREET,
		A.NUMBER,
		A.NEIGHBORHOOD,
		L.LOCATION_ID,
		AS_COUNTRY.ASSET_ID COUNTRY_ID,
		AS_COUNTRY.ASSET_CODE COUNTRY_CODE,
		AS_COUNTRY.NAME COUNTRY,
		AS_CITY.ASSET_ID CITY_ID,
		AS_CITY.ASSET_CODE CITY_CODE,
		AS_CITY.NAME CITY,
        L.CITY CITY_NAME
	FROM 
		ADDRESS A, 
		LOCATION L, 
		ASSET AS_COUNTRY, 
		ASSET AS_CITY
	WHERE 
		A.LOCATION_ID = L.LOCATION_ID
	AND AS_COUNTRY.ASSET_ID = L.COUNTRY_ID
	AND AS_CITY.ASSET_ID = L.CITY_ID
	AND A.ADDRESS_ID = IFNULL(IN_ADDRESS, A.ADDRESS_ID);
    
END //
DELIMITER ;

SET @msg = null;
CALL GET_ADDRESSES(1, @msg);
SELECT @msg;

/*################ GET_ASSETS ###################*/
DROP PROCEDURE IF EXISTS GET_ASSETS;
DELIMITER //
CREATE PROCEDURE GET_ASSETS (
	IN IN_ASSET INT,
    IN IN_CODE VARCHAR(8),
    IN IN_ATTR1 VARCHAR(450),
    -- IN IN_ATTR2 VARCHAR(450),
	-- IN IN_ATTR3 VARCHAR(450),
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN 
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = CONCAT( 'ERROR EXECUTING PROCESS [GET_ASSETS] - (', @errno ,'): ', @errmsg);
    END;
    
    SET OUT_MSG = 'OK';
    
    IF IN_ASSET IS NOT NULL OR IN_CODE IS NOT NULL THEN
		SELECT 
			A.ASSET_ID,
			A.ASSET_CODE,
			A.NAME,
			A.ATTR1,
			A.ATTR2,
			A.ATTR3,
			A.DESCRIPTION
		FROM 
			ASSET A 
		WHERE  
				A.ASSET_ID = CASE WHEN IN_ASSET IS NOT NULL THEN IN_ASSET ELSE GET_ASSET(IN_CODE) END;
	ELSE 
		SELECT 
			A.ASSET_ID,
			A.ASSET_CODE,
			A.NAME,
			A.ATTR1,
			A.ATTR2,
			A.ATTR3,
			A.DESCRIPTION
		FROM 
			ASSET A 
		WHERE  		
			A.ATTR1 = IFNULL(IN_ATTR1, A.ATTR1)    
            -- CASE WHEN IN_ATTR1 IS NULL THEN FALSE ELSE A.ATTR1 = IN_ATTR1 END
			-- OR CASE WHEN IN_ATTR2 IS NULL THEN FALSE ELSE A.ATTR2 = IN_ATTR2 END 
			-- OR CASE WHEN IN_ATTR3 IS NULL THEN FALSE ELSE A.ATTR3 = IN_ATTR3 END 
		;
    END IF;
    
END //
DELIMITER ;

SET @msg = null;
CALL GET_ASSETS(NULL, NULL, 'SALARY', @msg);
SELECT @msg;

/*################ GET_CONTACTS ###################*/
DROP PROCEDURE IF EXISTS GET_CONTACTS;
DELIMITER //
CREATE PROCEDURE GET_CONTACTS (
	IN IN_CONTACT INT,    
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN 
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = CONCAT( 'ERROR EXECUTING PROCESS [GET_CONTACTS] - (', @errno ,'): ', @errmsg);
    END;
    
    SET OUT_MSG = 'OK';
    
    SELECT 
		C.CONTACT_ID,
        C.EMAIL1,
        C.EMAIL2,
        C.PHONE1,
        C.PHONE2,
        C.DESCRIPTION
	FROM 
		CONTACT C 
	WHERE 
		C.CONTACT_ID = IFNULL(IN_CONTACT, C.CONTACT_ID);    
    
END //
DELIMITER ;

SET @msg = null;
CALL GET_CONTACTS(NULL, @msg);
SELECT @msg;

/*################ GET_FAMILY_CONTACTS ###################*/
DROP PROCEDURE IF EXISTS GET_FAMILY_CONTACTS;
DELIMITER //
CREATE PROCEDURE GET_FAMILY_CONTACTS (
	IN IN_STUDENT INT,
    IN IN_CONTACT_F INT,
    IN IN_CONTACT INT,    
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN 
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = CONCAT( 'ERROR EXECUTING PROCESS [GET_FAMILY_CONTACTS] - (', @errno ,'): ', @errmsg);
    END;	
    
    SET OUT_MSG = 'OK';
    
    SELECT 
		CF.CON_FAMILY_ID, CF.NAME, CF.KINSHIP,
		CF.WORK, CF.IS_EMERGENCY,
		CF.STUDENT_ID, CF.CONTACT_ID,    
		C.EMAIL1, C.EMAIL2, C.PHONE1, C.PHONE2
	FROM
		CONTACT_FAMILY CF,
		CONTACT C
	WHERE
		CF.STUDENT_ID = IFNULL(IN_STUDENT, CF.STUDENT_ID)    
	AND CF.CON_FAMILY_ID = IFNULL(IN_CONTACT_F, CF.CON_FAMILY_ID)
    AND CF.CONTACT_ID = IFNULL(IN_CONTACT, CF.CONTACT_ID)
	AND C.CONTACT_ID = CF.CONTACT_ID;
    
END //
DELIMITER ;

SET @msg = null;
CALL GET_FAMILY_CONTACTS(NULL, NULL, NULL, @msg);
SELECT @msg;

/*################ GET_GROUPS ###################*/
DROP PROCEDURE IF EXISTS GET_GROUPS;
DELIMITER //
CREATE PROCEDURE GET_GROUPS (
	IN IN_GROUP INT,
    IN IN_GROUP_CODE VARCHAR(20),
    OUT OUT_MSG VARCHAR(450)
) BEGIN 
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN 
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = CONCAT( 'ERROR EXECUTING PROCESS [GET_GROUP] - (', @errno ,'): ', @errmsg);
    END;
    
    SET OUT_MSG = 'OK';
    
    SELECT 
		GC.GROUP_ID, GC.GROUP_CODE, 
		GC.GROUP_KEY, GC.QUARTER,
		GC.MAJOR_ID, MAJOR.MAJOR_CODE MAJOR_CODE,
		MAJOR.NAME MAJOR, LEVEL_SCH.ASSET_ID LEVEL_ID,
		LEVEL_SCH.ASSET_CODE LEVEL_CODE,
		LEVEL_SCH.NAME LEVEL,
		GC.FIELD_ID, FIELD.ASSET_CODE FIELD_CODE,
		FIELD.NAME FIELD, GC.PERIOD_ID,
		PERIOD.ASSET_CODE PERIOD_CODE,
		PERIOD.NAME PERIOD, GC.DESCRIPTION
	FROM 
		GROUP_CLASS GC JOIN MAJOR MAJOR ON MAJOR.MAJOR_ID = GC.MAJOR_ID
					   JOIN ASSET FIELD ON FIELD.ASSET_ID = GC.FIELD_ID
					   JOIN ASSET PERIOD ON PERIOD.ASSET_ID = GC.PERIOD_ID
					   JOIN ASSET LEVEL_SCH ON LEVEL_SCH.ASSET_ID = MAJOR.LEVEL_ID
	WHERE 
        GC.GROUP_ID = IFNULL( 
			CASE WHEN IN_GROUP IS NOT NULL THEN 
				IN_GROUP 
			ELSE 
				GET_GROUP(IN_GROUP_CODE) 
			END, 
			GC.GROUP_ID
        );
        
END //
DELIMITER ; 

SET @msg = null;
CALL GET_GROUPS(NULL, NULL, @msg);
SELECT @msg;

/*################ GET_GROUP_STUDENTS ###################*/
DROP PROCEDURE IF EXISTS GET_GROUP_STUDENTS;
DELIMITER //
CREATE PROCEDURE GET_GROUP_STUDENTS (
	IN IN_GROUP INT,
    IN IN_STUDENT INT,
    IN IN_CURSED BOOL,
    OUT OUT_MSG VARCHAR(450)
) BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION BEGIN 
		GET DIAGNOSTICS CONDITION 1 @errno = MYSQL_ERRNO, @errmsg = MESSAGE_TEXT;
		SET OUT_MSG = CONCAT( 'ERROR EXECUTING PROCESS [GET_GROUP_STUDENTS] - (', @errno ,'): ', @errmsg);
    END;
    
    SET OUT_MSG = 'OK';
    
    SELECT 
		GS.GROUP_ID, GC.GROUP_CODE,
		GC.GROUP_KEY, GC.QUARTER,
		GC.DESCRIPTION, GS.IS_CURSED, 
		GS.STUDENT_ID, S.STUDENT_CODE, 
		S.NAME STUDENT_NAME, S.LAST_NAME STUDENT_LAST_NAME, S.BIRTH STUDENT_BIRTH
	FROM 
		GROUP_STUDENT GS JOIN STUDENT S ON GS.STUDENT_ID = S.STUDENT_ID
						 JOIN GROUP_CLASS GC ON GC.GROUP_ID = GS.GROUP_ID
	WHERE 
		GS.GROUP_ID = IFNULL(IN_GROUP, GS.GROUP_ID)
	AND GS.STUDENT_ID = IFNULL(IN_STUDENT, GS.STUDENT_ID)
    AND GS.IS_CURSED = IFNULL(IN_CURSED, GS.IS_CURSED);
    
END //
DELIMITER ;

SET @msg = null;
CALL GET_GROUP_STUDENTS(NULL, NULL, 0, @msg);
SELECT @msg;
